import { WOOD, Component, degToRad, Shader, Vec } from "../WOOD";

export class F extends Component {
  shader: Shader;

  constructor() {
    super();

    this.shader = new Shader({
      vertexShaderSource,
      fragmentShaderSource,
      attributes: ["a_position", "a_color"],
      uniforms: ["u_view"],
    });

    this.shader.bufferAttributeData({
      attribute: "a_position",
      data: F_GEOMETRY,
      size: 3,
    });

    this.shader.bufferAttributeData({
      attribute: "a_color",
      data: F_COLORS,
      size: 3,
      normalize: true,
      type: WOOD.gl.UNSIGNED_BYTE,
    });
  }

  update = (deltaTime: number) => {
    this.shader.use();

    // Make F go spiiiiin
    const { position, rotation, scale } = this.gameObject!.transform;
    rotation.y = rotation.y + deltaTime * 0.15;

    let view = WOOD.view.translate(
      new Vec([position.x, -position.y, position.z])
    );
    view = view.yRotate(degToRad(rotation.y));
    view = view.scale(scale);
    this.shader.uploadUniformMat4("u_view", WOOD.projection.multiply(view));

    // Draw the geometry.
    WOOD.gl.drawArrays(WOOD.gl.TRIANGLES, 0, 16 * 6);

    // Unbind everything
    WOOD.gl.bindVertexArray(null);
    this.shader.detach();
  };
}

const vertexShaderSource = `#version 300 es
  in vec4 a_position;
  in vec4 a_color;

  uniform mat4 u_view;

  out vec4 f_color;

  void main() {
    f_color = a_color;
    gl_Position = u_view * a_position;
  }
`;

const fragmentShaderSource = `#version 300 es
  precision highp float;
  
  in vec4 f_color;
  out vec4 outColor;

  void main() {
    outColor = f_color;
  }
`;

const F_GEOMETRY = new Float32Array([
  // left column front
  0,
  0,
  0,
  0,
  150,
  0,
  30,
  0,
  0,
  0,
  150,
  0,
  30,
  150,
  0,
  30,
  0,
  0,

  // top rung front
  30,
  0,
  0,
  30,
  30,
  0,
  100,
  0,
  0,
  30,
  30,
  0,
  100,
  30,
  0,
  100,
  0,
  0,

  // middle rung front
  30,
  60,
  0,
  30,
  90,
  0,
  67,
  60,
  0,
  30,
  90,
  0,
  67,
  90,
  0,
  67,
  60,
  0,

  // left column back
  0,
  0,
  30,
  30,
  0,
  30,
  0,
  150,
  30,
  0,
  150,
  30,
  30,
  0,
  30,
  30,
  150,
  30,

  // top rung back
  30,
  0,
  30,
  100,
  0,
  30,
  30,
  30,
  30,
  30,
  30,
  30,
  100,
  0,
  30,
  100,
  30,
  30,

  // middle rung back
  30,
  60,
  30,
  67,
  60,
  30,
  30,
  90,
  30,
  30,
  90,
  30,
  67,
  60,
  30,
  67,
  90,
  30,

  // top
  0,
  0,
  0,
  100,
  0,
  0,
  100,
  0,
  30,
  0,
  0,
  0,
  100,
  0,
  30,
  0,
  0,
  30,

  // top rung right
  100,
  0,
  0,
  100,
  30,
  0,
  100,
  30,
  30,
  100,
  0,
  0,
  100,
  30,
  30,
  100,
  0,
  30,

  // under top rung
  30,
  30,
  0,
  30,
  30,
  30,
  100,
  30,
  30,
  30,
  30,
  0,
  100,
  30,
  30,
  100,
  30,
  0,

  // between top rung and middle
  30,
  30,
  0,
  30,
  60,
  30,
  30,
  30,
  30,
  30,
  30,
  0,
  30,
  60,
  0,
  30,
  60,
  30,

  // top of middle rung
  30,
  60,
  0,
  67,
  60,
  30,
  30,
  60,
  30,
  30,
  60,
  0,
  67,
  60,
  0,
  67,
  60,
  30,

  // right of middle rung
  67,
  60,
  0,
  67,
  90,
  30,
  67,
  60,
  30,
  67,
  60,
  0,
  67,
  90,
  0,
  67,
  90,
  30,

  // bottom of middle rung.
  30,
  90,
  0,
  30,
  90,
  30,
  67,
  90,
  30,
  30,
  90,
  0,
  67,
  90,
  30,
  67,
  90,
  0,

  // right of bottom
  30,
  90,
  0,
  30,
  150,
  30,
  30,
  90,
  30,
  30,
  90,
  0,
  30,
  150,
  0,
  30,
  150,
  30,

  // bottom
  0,
  150,
  0,
  0,
  150,
  30,
  30,
  150,
  30,
  0,
  150,
  0,
  30,
  150,
  30,
  30,
  150,
  0,

  // left side
  0,
  0,
  0,
  0,
  0,
  30,
  0,
  150,
  30,
  0,
  0,
  0,
  0,
  150,
  30,
  0,
  150,
  0,
]);

const F_COLORS = new Uint8Array([
  // left column front
  200,
  70,
  120,
  200,
  70,
  120,
  200,
  70,
  120,
  200,
  70,
  120,
  200,
  70,
  120,
  200,
  70,
  120,

  // top rung front
  200,
  70,
  120,
  200,
  70,
  120,
  200,
  70,
  120,
  200,
  70,
  120,
  200,
  70,
  120,
  200,
  70,
  120,

  // middle rung front
  200,
  70,
  120,
  200,
  70,
  120,
  200,
  70,
  120,
  200,
  70,
  120,
  200,
  70,
  120,
  200,
  70,
  120,

  // left column back
  80,
  70,
  200,
  80,
  70,
  200,
  80,
  70,
  200,
  80,
  70,
  200,
  80,
  70,
  200,
  80,
  70,
  200,

  // top rung back
  80,
  70,
  200,
  80,
  70,
  200,
  80,
  70,
  200,
  80,
  70,
  200,
  80,
  70,
  200,
  80,
  70,
  200,

  // middle rung back
  80,
  70,
  200,
  80,
  70,
  200,
  80,
  70,
  200,
  80,
  70,
  200,
  80,
  70,
  200,
  80,
  70,
  200,

  // top
  70,
  200,
  210,
  70,
  200,
  210,
  70,
  200,
  210,
  70,
  200,
  210,
  70,
  200,
  210,
  70,
  200,
  210,

  // top rung right
  200,
  200,
  70,
  200,
  200,
  70,
  200,
  200,
  70,
  200,
  200,
  70,
  200,
  200,
  70,
  200,
  200,
  70,

  // under top rung
  210,
  100,
  70,
  210,
  100,
  70,
  210,
  100,
  70,
  210,
  100,
  70,
  210,
  100,
  70,
  210,
  100,
  70,

  // between top rung and middle
  210,
  160,
  70,
  210,
  160,
  70,
  210,
  160,
  70,
  210,
  160,
  70,
  210,
  160,
  70,
  210,
  160,
  70,

  // top of middle rung
  70,
  180,
  210,
  70,
  180,
  210,
  70,
  180,
  210,
  70,
  180,
  210,
  70,
  180,
  210,
  70,
  180,
  210,

  // right of middle rung
  100,
  70,
  210,
  100,
  70,
  210,
  100,
  70,
  210,
  100,
  70,
  210,
  100,
  70,
  210,
  100,
  70,
  210,

  // bottom of middle rung.
  76,
  210,
  100,
  76,
  210,
  100,
  76,
  210,
  100,
  76,
  210,
  100,
  76,
  210,
  100,
  76,
  210,
  100,

  // right of bottom
  140,
  210,
  80,
  140,
  210,
  80,
  140,
  210,
  80,
  140,
  210,
  80,
  140,
  210,
  80,
  140,
  210,
  80,

  // bottom
  90,
  130,
  110,
  90,
  130,
  110,
  90,
  130,
  110,
  90,
  130,
  110,
  90,
  130,
  110,
  90,
  130,
  110,

  // left side
  160,
  160,
  220,
  160,
  160,
  220,
  160,
  160,
  220,
  160,
  160,
  220,
  160,
  160,
  220,
  160,
  160,
  220,
]);
